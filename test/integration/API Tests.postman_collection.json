{
	"info": {
		"_postman_id": "e0517183-b2b3-4e10-9aa0-e635278305b2",
		"name": "API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Books",
			"item": [
				{
					"name": "Search on Empty: Title = \"Pride and Prejudice\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search should return empty array and 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.json().length).to.equal(0);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/books?title=Pride%20and%20Prejudice",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"books"
							],
							"query": [
								{
									"key": "title",
									"value": "Pride%20and%20Prejudice"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Book: Pride and Prejudice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST should succeed and return 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"POST should return ID of created resource\", function() {\r",
									"    pm.response.to.have.body(\"1\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Pride and Prejudice\",\r\n    \"author\": \"Jane Austen\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/books",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Book: 1984",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST should succeed and return 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"POST should return ID of created resource\", function() {\r",
									"    pm.response.to.have.body(\"2\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"1984\",\r\n    \"author\": \"George Orwell\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/books",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Book: ID included in POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST should fail and return 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 101,\r\n    \"title\": \"1984\",\r\n    \"author\": \"George Orwell\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/books",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Book: Title 501 chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST should fail and return 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"titler\n    \"author\": \"George Orwell\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/books",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Book: Author 201 chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST should fail and return 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"1984\",\r\n    \"author\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/books",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Book: Title 0 chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST should fail and return 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"\",\r\n    \"author\": \"George Orwell\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/books",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for Existing: Title = \"Pride and Prejudice\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search should return array with one item and 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const jsonResponse = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonResponse.length).to.equal(1);\r",
									"    pm.expect(jsonResponse[0].title).to.equal(\"Pride and Prejudice\");\r",
									"    pm.expect(jsonResponse[0].author).to.equal(\"Jane Austen\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/books?title=Pride%20and%20Prejudice",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"books"
							],
							"query": [
								{
									"key": "title",
									"value": "Pride%20and%20Prejudice"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for Existing: Title = \"1984\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search should return array with one item and 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const jsonResponse = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonResponse.length).to.equal(1);\r",
									"    pm.expect(jsonResponse[0].title).to.equal(\"1984\");\r",
									"    pm.expect(jsonResponse[0].author).to.equal(\"George Orwell\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/books?title=1984",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"books"
							],
							"query": [
								{
									"key": "title",
									"value": "1984"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Search on Empty: Full Name = Alice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search should return empty array and 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.json().length).to.equal(0);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/users?full_name=Alice",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "full_name",
									"value": "Alice"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search on Empty: By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/users/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User: Alice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST should succeed and return 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.body(\"1\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"full_name\": \"Alice\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/users",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User: Bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST should succeed and return 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.body(\"2\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"full_name\": \"Bob\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/users",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for Existing: Full Name = Alice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search should return array of 1 item and 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.length).to.equal(1);\r",
									"    pm.expect(responseJson[0].full_name).to.equal(\"Alice\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/users?full_name=Alice",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "full_name",
									"value": "Alice"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for Existing: Alice by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return Alice's user record and 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.id).to.equal(1);\r",
									"    pm.expect(responseJson.full_name).to.equal(\"Alice\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/users/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"users",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Loans",
			"item": [
				{
					"name": "Search on Empty: Get all Loans",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/loans",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"loans"
							]
						}
					},
					"response": []
				},
				{
					"name": "Loan Pride and Prejudice to Alice",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": 1,\r\n    \"book_id\": 1,\r\n    \"due_date\": \"2012-04-23T18:25:43.511Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/loans",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"loans"
							]
						}
					},
					"response": []
				},
				{
					"name": "Loan 1984 to Alice",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": 1,\r\n    \"book_id\": 2,\r\n    \"due_date\": \"2012-04-23T18:25:43.511Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/loans",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"loans"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for Existing: Get all Loans",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/loans",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"loans"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for Existing: 1984 to Alice by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Loan 2 should be 1984, to Alice\", function() {\r",
									"    const jsonResponse = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonResponse.user_id).to.equal(1);\r",
									"    pm.expect(jsonResponse.book_id).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/loans/2",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"loans",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Existing: Delete 1984 to Alice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete loan 2 (1984, to Alice) should return 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.body(\"2\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/loans/2",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"loans",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search after Deletion: By ID should return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Loan 2 should be 1984, to Alice\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"    pm.response.to.have.body(\"Loan does not exist in the system\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/api/v1/loans/2",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"loans",
								"2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}